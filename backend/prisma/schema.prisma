generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum RequestStatus {
    NOT_COMPLETED
    WAITING_FOR_APPROVAL
    ACCEPTED
    DENIED
}

enum Language {
    CATALAN
    SPANISH
    ENGLISH
    OTHER
}

enum LexicalCategory {
    ADJECTIVE
    INTERJECTION
    NOUN
    NOUN_OR_VERB
    NOUN_OR_ADJECTIVE
    NOUN_ADJECTIVE_OR_VERB
    VERB_OR_ADJECTIVE
    PARTICLE
    VERB
    ADVERB
    PRONOUN
    NOUN_ADJECTIVE_OR_ADVERB
    PARTICLE_NOUN_OR_VERB
    NOUN_OR_ADVERB
    VERB_ADJECTIVE_OR_ADVERB
    VERB_OR_INTERJECTION
    ADJECTIVE_OR_ADVERB
    VERB_ADJECTIVE_OR_PARTICLE
    PARTICLE_OR_ADJECTIVE
    NOUN_ADJECTIVE_OR_PARTICLE
    VERB_OR_ADVERB
    PARTICLE_OR_ADVERB
    NOUN_VERB_OR_ADVERB
    NOUN_OR_INTERJECTION
    ADVERB_OR_INTERJECTION
    VERB_OR_PARTICLE
    NOUN_OR_PREPOSITION
}

enum RelationType {
    SYNONYM
    REGIONAL_VARIANT
    ASSOCIATED_CONCEPT
    ANTONYM
    HOMONYM
    VARIANT
    HYPERNYM
    HYPONYM
}

enum Hand {
    RIGHT
    LEFT
    BOTH
}

enum GlossStatus {
    PUBLISHED
    ARCHIVED
}

enum EditStatus {
    PENDING
    APPROVED
    REJECTED
}

enum HandConfiguration {
    EMPTY
    CONF_1
    CONF_2
    CONF_3
    CONF_4
    CONF_5
    CONF_6
    CONF_1D834
    CONF_7
    CONF_8
    CONF_9
    CONF_10
    CONF_11
    CONF_12
    CONF_13
    CONF_14
    CONF_15
    CONF_16
    CONF_1D86C
    CONF_18
    CONF_1D82E
    CONF_19
    CONF_20
    CONF_21
    CONF_22
    CONF_23
    CONF_24
    CONF_25
    CONF_26
    CONF_27
    CONF_29
    CONF_30
    CONF_31
    CONF_32
    CONF_33
    CONF_34
    CONF_35
    CONF_36
    CONF_37
    CONF_38
    CONF_39
    CONF_40
    CONF_1D8C3
    CONF_42
    CONF_1D87D
    CONF_1D8C5
    CONF_1D8A7
    CONF_1D8B
    CONF_1D88E
    CONF_1D8BA
    CONF_1D8C7
    CONF_2A
}

enum ConfigurationChange {
    EMPTY
    BENDING
    CLOSING
    CLOSING_AND_RUBBING
    CLOSING_AND_WIGGLING
    CLOSING_TO_OPENING
    CONSECUTIVE_CLOSING
    CURVING
    NONE_TO_SPREADING
    OPENING
    OPENING_AND_RUBBING
    OPENING_AND_SPREADING
    OPENING_AND_WIGGLING
    OPENING_TO_CLOSING
    RUBBING
    SPREADING
    UNBENDING
    UNCURVING
    UNSPREADING
    WIGGLING
}

enum RelationBetweenArticulators {
    EMPTY
    ABOVE
    ABOVE_BELOW
    AROUND
    BACK
    BELOW
    CROSS
    FRONT
    FRONT_BACK
    INSIDE
    INTERWOVEN
    NEXT_TO
}

enum Location {
    EMPTY
    ARM
    ARMPIT
    BACK
    BACK_OF_HEAD
    BELLY
    BREASTS
    BREAST_IPSI
    BREAST_CONTRA
    BRIDGE_OF_NOSE
    CHEEK
    CHEEK_CONTRA
    CHEEKBONE
    CHEST
    CHEST_CONTRA
    CHIN
    CHIN_CONTRA
    CROTCH
    EAR
    EARLOBE
    EAST
    ELBOW
    EYE
    EYEBROW
    FACE
    FACE_IPSI
    FLANK
    FOREHEAD
    FOREHEAD_CONTRA
    HEAD
    HEAD_CONTRA
    HEAD_IPSI
    HIP
    HORIZONTAL_PLANE
    KNEE
    LEG
    LOWER_ARM
    LOWER_LIP
    MOUTH
    MOUTH_CONTRA
    MOUTH_IPSI
    NECK
    NECK_CONTRA
    NEUTRAL_SPACE
    NOSE
    PARALLEL_PLANE
    R_LOC
    SHOULDER
    SHOULDER_CONTRA
    TEETH
    TEMPLE
    THUMB
    TONGUE
    TRUNK
    UPPER_ARM
    UPPER_LIP
    VARIABLE
    VIRTUAL_OBJECT
    WAIST
    WEST
    WRIST

    WEAK_HAND
    WEAK_HAND_BACK
    WEAK_HAND_BASE
    WEAK_HAND_FINGER_TIPS
    WEAK_HAND_FINGER
    WEAK_HAND_FRONT
    WEAK_HAND_INDEX_FINGER
    WEAK_HAND_KNUCKLES
    WEAK_HAND_MIDDLE_FINGER
    WEAK_HAND_PALM
    WEAK_HAND_PINKIE
    WEAK_HAND_PINKIE_SIDE
    WEAK_HAND_RING_FINGER
    WEAK_HAND_THENAR
    WEAK_HAND_THUMB
    WEAK_HAND_THUMB_SIDE
    WEAK_HAND_WEB_SPACE

    BELLY_TO_CHEST
    CHEEK_TO_CHEEK
    CHEEK_TO_CHIN
    CHIN_TO_CHEST
    CHIN_TO_NEUTRAL_SPACE
    CHIN_TO_WEAK_HAND_INDEX
    CHIN_TO_WEAK_HAND_PALM
    CHIN_TO_WEAK_HAND_THUMB
    EAR_TO_CHEEK
    EAR_TO_CHEST
    EAR_TO_MOUTH
    EYE_TO_NEUTRAL_SPACE
    FACE_TO_HEAD
    FACE_TO_NEUTRAL_SPACE
    FOREHEAD_TO_CHEST
    FOREHEAD_TO_CHIN
    FOREHEAD_TO_NEUTRAL_SPACE
    FOREHEAD_TO_WEAK_HAND_PALM
    HEAD_TO_CHEST
    HEAD_TO_CHEST_TO_SHOULDER
    HEAD_TO_NEUTRAL_SPACE
    HEAD_TO_SHOULDER
    HEAD_TO_WEAK_HAND_PALM
    LEG_TO_WAIST
    MOUTH_TO_CHEEK
    MOUTH_TO_CHEST
    MOUTH_TO_CHIN
    MOUTH_TO_NEUTRAL_SPACE
    MOUTH_TO_WEAK_HAND
    MOUTH_TO_WEAK_HAND_PALM
    NECK_TO_CHEST
    NECK_TO_NEUTRAL_SPACE
    NEUTRAL_SPACE_TO_HEAD
    NEUTRAL_SPACE_TO_SHOULDER
    NEUTRAL_SPACE_TO_NOSE
    NEUTRAL_SPACE_TO_CHEEK
    NEUTRAL_SPACE_TO_MOUTH
    NEUTRAL_SPACE_TO_CHEST
    NEUTRAL_SPACE_TO_WEAK_HAND
    NOSE_TO_CHIN
    NOSE_TO_NEUTRAL_SPACE
    NOSE_TO_WEAK_HAND
    R_LOC_TO_R_LOC
    SHOULDER_TO_CHEST
    SHOULDER_TO_SHOULDER
    SHOULDER_TO_WEAK_HAND_PALM
    SHOULDER_TO_NEUTRAL_SPACE
    SHOULDER_TO_HIT
    TEMPLE_TO_CHEST
    TEMPLE_TO_CHEEK
    TEMPLE_TO_SHOULDER
    TEMPLE_TO_NEUTRAL_SPACE
    WEAK_HAND_TO_ARM
    WEAK_HAND_TO_NEUTRAL_SPACE
    WEAK_HAND_THUMB_SIDE_TO_ARM
    ARMPIT_TO_NEUTRAL_SPACE
    CHEST_TO_CHIN
    CHEST_TO_NEUTRAL_SPACE

    BELLY_AND_FOREHEAD
    HEAD_AND_NEUTRAL_SPACE
    FLANK_OR_HEAD
    NEUTRAL_SPACE_OR_WEAK_HAND_FRONT
    BOTTOM_OR_CROTCH
}

enum MovementRelatedOrientation {
    EMPTY
    BACK
    BASE
    FINGER_TIPS
    FRONT
    PALM
    RADIAL
    ULNAR
    VARIABLE
    BACK_AND_BASE
    BACK_AND_RADIAL
    BACK_AND_ULNAR
    BASE_AND_FRONT
    BASE_AND_PALM
    BASE_AND_ULNAR
    FRONT_AND_ULNAR
    PALM_AND_RADIAL
    PALM_AND_ULNAR
    PALM_AND_RADIAL_OR_ULNAR
    BACK_TO_FINGER_TIPS
    BACK_TO_FRONT
    BACK_TO_PALM
    BACK_TO_RADIAL
    BASE_TO_BACK
    BASE_TO_BASE
    BASE_TO_FRONT
    BASE_TO_PALM
    BASE_TO_ULNAR
    FINGER_TIPS_TO_BACK
    FINGER_TIPS_TO_BASE
    FINGER_TIPS_TO_PALM
    FRONT_TO_BACK
    PALM_TO_BACK
    PALM_TO_BASE
    RADIAL_TO_ULNAR
    ULNAR_TO_BASE
    ULNAR_TO_BASE_TO_RADIAL
    ULNAR_TO_FRONT
    ULNAR_TO_PALM
    ULNAR_TO_PALM_TO_RADIAL
    ULNAR_TO_RADIAL
    BACK_OR_BASE
    BACK_OR_FINGER_TIPS
    BACK_OR_PALM
    BASE_OR_FRONT
    FINGER_TIPS_OR_BASE
    FINGER_TIPS_OR_ULNAR
    FRONT_OR_PALM
    RADIAL_OR_ULNAR
}

enum OrientationRelatedToLocation {
    EMPTY
    AO_FINGERS_CONTRA
    AO_FINGERS_DOWN
    AO_FINGERS_UP
    AO_PALM_BACKWARDS
    AO_PALM_DOWN
    AO_PALM_DOWN_TO_UP
    AO_PALM_FORWARDS
    AO_PALM_INWARDS
    AO_PALM_OUTWARDS
    AO_PALM_UP
    AO_PALM_UP_OR_DOWN
    BACK
    BACK_TO_PALM
    BACK_TO_ULNAR
    BACK_OR_PALM
    BACK_OR_PALM_TO_PALM
    BASE
    COUNTING
    FINGER_TIPS
    FINGER_TIPS_OR_BASE
    FINGERSPELLING
    FRONT
    PALM
    PALM_TO_ULNAR
    RADIAL
    RADIAL_OR_ULNAR
    ULNAR
}

enum OrientationChange {
    EMPTY
    EXTENSION
    EXTENSION_AND_PRONATION
    EXTENSION_TO_FLEXION
    EXTENSION_OR_FLEXION
    FLEXION
    FLEXION_TO_EXTENSION
    PRONATION
    PRONATION_OR_SUPINATION
    RADIAL_AND_ULNAR_FLEXION
    RADIAL_FLEXION
    ROTATION
    SUPINATION
    SUPINATION_TO_PRONATION
    ULNAR_FLEXION
    PRONATION_TO_FLEXION
    SUPINATION_TO_EXTENSION
}

enum ContactType {
    EMPTY
    BRUSH
    CONTINUOUS
    CONTINUOUS_TO_CONTINUOUS
    CONTINUOUS_TO_FINAL
    CONTINUOUS_TO_NONE
    DOUBLE
    FINAL
    FINAL_TO_CONTINUOUS
    FINAL_TO_NONE
    INITIAL
    NONE_TO_FINAL
    NONE_TO_INITIAL
    INITIAL_TO_FINAL
}

enum MovementType {
    EMPTY
    ARC
    CIRCLE
    CROSS
    MOTIVATED_SHAPE
    SPIRAL
    STRAIGHT
    ZIGZAG
    STRAIGHT_TO_CIRCLE
}

enum MovementDirection {
    EMPTY
    BACKWARDS
    BACKWARDS_AND_CONTRALATERAL
    BACKWARDS_AND_DOWNWARDS
    BACKWARDS_AND_IPSILATERAL
    BACKWARDS_AND_UPWARDS
    BACKWARDS_TO_DOWNWARDS
    BACKWARDS_TO_FORWARDS
    BACKWARDS_OR_FORWARDS
    CONTRALATERAL
    CONTRALATERAL_AND_DOWNWARDS
    CONTRALATERAL_AND_FORWARDS
    CONTRALATERAL_AND_UPWARDS
    CONTRALATERAL_TO_FORWARDS
    CONTRALATERAL_TO_IPSILATERAL
    DISTAL
    DOWNWARDS
    DOWNWARDS_AND_CONTRALATERAL_OR_IPSILATERAL
    DOWNWARDS_AND_FORWARDS
    DOWNWARDS_AND_IPSILATERAL
    DOWNWARDS_AND_IPSILATERAL_TO_DOWNWARDS
    DOWNWARDS_AND_TOWARDS
    DOWNWARDS_TO_CONTRALATERAL
    DOWNWARDS_TO_FORWARDS
    DOWNWARDS_TO_IPSILATERAL
    DOWNWARDS_TO_UPWARDS
    DOWNWARDS_OR_UPWARDS
    DOWNWARDS_OR_UPWARDS_AND_IPSILATERAL
    FORWARDS
    FORWARDS_AND_IPSILATERAL
    FORWARDS_AND_UPWARDS
    FORWARDS_TO_BACKWARDS
    FORWARDS_TO_CONTRALATERAL
    FORWARDS_TO_DOWNWARDS
    FORWARDS_TO_IPSILATERAL
    FORWARDS_TO_IPSILATERAL_TO_FORWARDS
    FORWARDS_TO_UPWARDS
    FROM_LOCATION
    IPSILATERAL
    IPSILATERAL_AND_UP_AND_DOWN
    IPSILATERAL_AND_UPWARDS
    IPSILATERAL_TO_CONTRALATERAL
    IPSILATERAL_TO_DOWNWARDS
    IPSILATERAL_TO_DOWNWARDS_TO_CONTRALATERAL
    IPSILATERAL_TO_UPWARDS
    IPSILATERAL_AND_CONTRALATERAL
    IPSILATERAL_OR_CONTRALATERAL
    LATERAL
    PROXIMAL
    TO_AND_FRO
    TOWARDS_LOCATION
    UP_AND_DOWN
    UPWARDS
    UPWARDS_TO_DOWNWARDS
    UPWARDS_TO_FORWARDS_TO_DOWNWARDS
    UPWARDS_TO_IPSILATERAL
    VARIABLE
    FORWARDS_AND_DOWNWARDS
    CONTRALATERAL_TO_DOWNWARDS
    DOWNWARDS_TO_CONTRALATERAL_TO_IPSILATERAL
    UPWARDS_AND_FORWARDS
    IPSILATERAL_TO_FORWARDS
    IPSILATERAL_TO_BACKWARDS_TO_CONTRALATERAL
    IPSILATERAL_AND_DOWNWARDS
}

model User {
    id               String         @id @default(uuid())
    username         String         @unique
    name             String
    lastName         String
    email            String         @unique
    password         String
    role             Role           @default(USER)
    createdAt        DateTime       @default(now())
    accessToken      String?
    refreshToken     String?
    glossRequests    GlossRequest[] @relation("Creator")
    acceptedRequests GlossRequest[] @relation("Acceptor")
    deniedRequests   GlossRequest[] @relation("Denier")
}

model DictionaryEntry {
    id                   String        @id @default(uuid())
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    status               GlossStatus   @default(PUBLISHED)
    editComment          String?
    currentVersion       Int           @default(1)
    isCreatedFromRequest Boolean       @default(false)
    isCreatedFromEdit    Boolean       @default(false)
    glossRequest         GlossRequest? @relation(fields: [glossRequestId], references: [id])
    glossRequestId       String?       @unique
    glossData            GlossData     @relation(fields: [glossDataId], references: [id], onDelete: Cascade)
    glossDataId          String        @unique
}

model GlossData {
    id                   String           @id @default(uuid())
    gloss                String
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    editComment          String?
    currentVersion       Int              @default(1)
    isCreatedFromRequest Boolean          @default(false)
    isCreatedFromEdit    Boolean          @default(false)
    dictionaryEntry      DictionaryEntry?
    glossRequest         GlossRequest?
    glossVideos          SignVideo[]
    senses               Sense[]
    relationsAsSource    RelatedGloss[]   @relation("RelationSource")
    relationsAsTarget    RelatedGloss[]   @relation("RelationTarget")
    minimalPairsAsSource MinimalPair[]    @relation("MinimalPairSource")
    minimalPairsAsTarget MinimalPair[]    @relation("MinimalPairTarget")
}

model RelatedGloss {
    id            String       @id @default(uuid())
    relationType  RelationType
    sourceGloss   GlossData    @relation("RelationSource", fields: [sourceGlossId], references: [id])
    sourceGlossId String
    targetGloss   GlossData    @relation("RelationTarget", fields: [targetGlossId], references: [id])
    targetGlossId String

    @@unique([sourceGlossId, targetGlossId])
}

model Sense {
    id                String             @id @default(uuid())
    senseTitle        String
    priority          Int                @default(0)
    definitions       Definition[]
    lexicalCategory   LexicalCategory    @default(NOUN)
    glossDataId       String
    glossData         GlossData          @relation(fields: [glossDataId], references: [id], onDelete: Cascade)
    examples          Example[]
    senseTranslations SenseTranslation[]
}

model SenseTranslation {
    id          String   @id @default(uuid())
    translation String
    language    Language
    sense       Sense    @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId     String
}

model Definition {
    id                     String                  @id @default(uuid())
    title                  String?
    definition             String
    definitionTranslations DefinitionTranslation[]
    videoDefinitionUrl     String?
    sense                  Sense                   @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId                String
    priority               Int                     @default(0)
}

model Example {
    id                  String               @id @default(uuid())
    example             String
    exampleVideoURL     String
    sense               Sense                @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId             String
    exampleTranslations ExampleTranslation[]
}

model ExampleTranslation {
    id          String   @id @default(uuid())
    translation String
    language    Language
    Example     Example? @relation(fields: [exampleId], references: [id], onDelete: Cascade)
    exampleId   String?
}

model DefinitionTranslation {
    id           String     @id @default(uuid())
    translation  String
    language     Language
    definition   Definition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
    definitionId String
}

model SignVideo {
    id          String    @id @default(uuid())
    title       String
    videos      Video[]
    priority    Int       @default(0)
    videoData   VideoData @relation(fields: [videoDataId], references: [id], onDelete: Cascade)
    videoDataId String
    glossData   GlossData @relation(fields: [glossDataId], references: [id], onDelete: Cascade)
    glossDataId String
}

model VideoData {
    hands                        Hand
    configuration                HandConfiguration
    configurationChanges         ConfigurationChange
    relationBetweenArticulators  RelationBetweenArticulators
    location                     Location
    movementRelatedOrientation   MovementRelatedOrientation
    orientationRelatedToLocation OrientationRelatedToLocation
    orientationChange            OrientationChange
    contactType                  ContactType
    movementType                 MovementType
    movementDirection            MovementDirection
    vocalization                 String
    nonManualComponent           String
    inicialization               String
    repeatedMovement             Boolean                      @default(false)
    signVideo                    SignVideo[]
    id                           String                       @id @default(uuid())
}

model Video {
    id          String    @id @default(uuid())
    url         String
    angle       String
    priority    Int       @default(0)
    signVideo   SignVideo @relation(fields: [signVideoId], references: [id], onDelete: Cascade)
    signVideoId String
}

model MinimalPair {
    id            String    @id @default(uuid())
    distinction   String
    sourceGloss   GlossData @relation("MinimalPairSource", fields: [sourceGlossId], references: [id])
    sourceGlossId String
    targetGloss   GlossData @relation("MinimalPairTarget", fields: [targetGlossId], references: [id])
    targetGlossId String

    @@unique([sourceGlossId, targetGlossId])
}

model GlossRequest {
    id                   String           @id @default(uuid())
    creator              User             @relation("Creator", fields: [creatorId], references: [id])
    creatorId            String
    status               RequestStatus    @default(NOT_COMPLETED)
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    lastEditedSection    String? // Tracks which section was last edited (e.g. "definitions", "examples", etc.)
    denyReason           String?
    acceptedBy           User?            @relation("Acceptor", fields: [acceptedById], references: [id])
    acceptedById         String?
    deniedBy             User?            @relation("Denier", fields: [deniedById], references: [id])
    deniedById           String?
    requestedGlossData   GlossData        @relation(fields: [requestedGlossDataId], references: [id], onDelete: Cascade)
    requestedGlossDataId String           @unique
    glossId              String?
    dictionaryEntry      DictionaryEntry?
}
