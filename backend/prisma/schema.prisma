generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum RequestStatus {
    NOT_COMPLETED
    WAITING_FOR_APPROVAL
    ACCEPTED
    DENIED
}

enum Language {
    CATALAN
    SPANISH
    ENGLISH
    OTHER
}

enum LexicalCategory {
    NOUN
    VERB
    ADJECTIVE
    ADVERB
    PRONOUN
    DETERMINER
    PREPOSITION
    CONJUNCTION
    INTERJECTION
    OTHER
}

enum RelationType {
    SYNONYM
    REGIONAL_VARIANT
    ASSOCIATED_CONCEPT
    ANTONYM
    HYPERNYM
    HYPONYM
}

enum Hand {
    RIGHT
    LEFT
    BOTH
}

enum GlossStatus {
    PUBLISHED
    ARCHIVED
}

enum EditStatus {
    PENDING
    APPROVED
    REJECTED
}

model User {
    id               String         @id @default(uuid())
    username         String         @unique
    email            String         @unique
    password         String
    role             Role           @default(USER)
    createdAt        DateTime       @default(now())
    accessToken      String?
    refreshToken     String?
    glossRequests    GlossRequest[] @relation("Creator")
    acceptedRequests GlossRequest[] @relation("Acceptor")
    deniedRequests   GlossRequest[] @relation("Denier")
}

model DictionaryEntry {
    id                   String        @id @default(uuid())
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    status               GlossStatus   @default(PUBLISHED)
    editComment          String?
    currentVersion       Int           @default(1)
    isCreatedFromRequest Boolean       @default(false)
    isCreatedFromEdit    Boolean       @default(false)
    glossRequest         GlossRequest? @relation(fields: [glossRequestId], references: [id])
    glossRequestId       String?       @unique
    glossData            GlossData     @relation(fields: [glossDataId], references: [id], onDelete: Cascade)
    glossDataId          String        @unique
}

model GlossData {
    id                   String           @id @default(uuid())
    gloss                String
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    editComment          String?
    currentVersion       Int              @default(1)
    isCreatedFromRequest Boolean          @default(false)
    isCreatedFromEdit    Boolean          @default(false)
    dictionaryEntry      DictionaryEntry?
    glossRequest         GlossRequest?
    senses               Sense[]
    relationsAsSource    RelatedGloss[]   @relation("RelationSource")
    relationsAsTarget    RelatedGloss[]   @relation("RelationTarget")
    minimalPairsAsSource MinimalPair[]    @relation("MinimalPairSource")
    minimalPairsAsTarget MinimalPair[]    @relation("MinimalPairTarget")
}

model RelatedGloss {
    id            String       @id @default(uuid())
    relationType  RelationType
    sourceGloss   GlossData    @relation("RelationSource", fields: [sourceGlossId], references: [id])
    sourceGlossId String
    targetGloss   GlossData    @relation("RelationTarget", fields: [targetGlossId], references: [id])
    targetGlossId String

    @@unique([sourceGlossId, targetGlossId])
}

model Sense {
    id                String             @id @default(uuid())
    senseTitle        String
    priority          Int                @default(0)
    definitions       Definition[]
    lexicalCategory   LexicalCategory?
    signVideos        SignVideo[]
    glossDataId       String
    glossData         GlossData          @relation(fields: [glossDataId], references: [id], onDelete: Cascade)
    examples          Example[]
    senseTranslations SenseTranslation[]
}

model SenseTranslation {
    id          String   @id @default(uuid())
    translation String
    language    Language
    sense       Sense    @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId     String
}

model Definition {
    id                     String                  @id @default(uuid())
    title                  String?
    definition             String
    definitionTranslations DefinitionTranslation[]
    videoDefinitionUrl     String?
    sense                  Sense                   @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId                String
}

model Example {
    id                  String               @id @default(uuid())
    example             String
    exampleVideoURL     String
    sense               Sense                @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId             String
    exampleTranslations ExampleTranslation[]
}

model ExampleTranslation {
    id          String   @id @default(uuid())
    translation String
    language    Language
    Example     Example? @relation(fields: [exampleId], references: [id], onDelete: Cascade)
    exampleId   String?
}

model DefinitionTranslation {
    id           String     @id @default(uuid())
    translation  String
    language     Language
    definition   Definition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
    definitionId String
}

model SignVideo {
    id          String    @id @default(uuid())
    title       String
    videos      Video[]
    url         String
    priority    Int       @default(0)
    videoData   VideoData @relation(fields: [videoDataId], references: [id], onDelete: Cascade)
    videoDataId String
    sense       Sense     @relation(fields: [senseId], references: [id], onDelete: Cascade)
    senseId     String
}

model VideoData {
    hands                       Hand
    configuration               String
    configurationChanges        String
    relationBetweenArticulators String
    location                    String
    movementRelatedOrientation  String
    locationRelatedOrientation  String
    orientationChange           String
    contactType                 String
    movementType                String
    vocalization                String
    nonManualComponent          String
    inicialization              String
    signVideo                   SignVideo[]
    id                          String      @id @default(uuid())
}

model Video {
    id          String    @id @default(uuid())
    url         String
    angle       String
    priority    Int       @default(0)
    signVideo   SignVideo @relation(fields: [signVideoId], references: [id], onDelete: Cascade)
    signVideoId String
}

model MinimalPair {
    id            String    @id @default(uuid())
    distinction   String
    sourceGloss   GlossData @relation("MinimalPairSource", fields: [sourceGlossId], references: [id])
    sourceGlossId String
    targetGloss   GlossData @relation("MinimalPairTarget", fields: [targetGlossId], references: [id])
    targetGlossId String

    @@unique([sourceGlossId, targetGlossId])
}

model GlossRequest {
    id                   String           @id @default(uuid())
    creator              User             @relation("Creator", fields: [creatorId], references: [id])
    creatorId            String
    status               RequestStatus    @default(NOT_COMPLETED)
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    lastEditedSection    String? // Tracks which section was last edited (e.g. "definitions", "examples", etc.)
    denyReason           String?
    acceptedBy           User?            @relation("Acceptor", fields: [acceptedById], references: [id])
    acceptedById         String?
    deniedBy             User?            @relation("Denier", fields: [deniedById], references: [id])
    deniedById           String?
    requestedGlossData   GlossData        @relation(fields: [requestedGlossDataId], references: [id], onDelete: Cascade)
    requestedGlossDataId String           @unique
    glossId              String?
    dictionaryEntry      DictionaryEntry?
}
